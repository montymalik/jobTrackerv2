// schema.prisma

datasource db {
  provider = "postgresql" // or your current provider (e.g., mysql, sqlite)
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ApplicationStatus {
  TO_APPLY
  APPLIED
  INTERVIEW_SCHEDULED
  ARCHIVED
}

model JobApplication {
  id                   String             @id @default(uuid())
  companyName          String
  jobTitle             String
  jobDescription       String?
  jobUrl               String?
  status               ApplicationStatus
  dateApplied          DateTime?
  contactInfo          Json?
  hasBeenContacted     Boolean           @default(false)
  files                JobFile[]
  resumes              GeneratedResume[]  // Relation to generated resumes
  coverLetters         CoverLetter[]      // Add relation to cover letters
  keySkills            String?
  notes                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  dateSubmitted        DateTime?
  dateOfInterview      DateTime?
  confirmationReceived Boolean           @default(false)
  rejectionReceived    Boolean           @default(false)
}

model JobFile {
  id               String         @id @default(uuid())
  fileName         String
  fileType         String
  nextcloudPath    String
  jobApplicationId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model BaseResume {
  id          String    @id @default(uuid())
  resumeJson  Json
  fileName    String
  fileType    String
  filePath    String?   // Path to the original file
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model to store generated resumes
model GeneratedResume {
  id               String         @id @default(uuid())
  markdownContent  String         // Markdown version of the resume
  jsonContent     String?   @db.Text // Add this field for structured JSON data
  contentType     String?   @default("markdown") // Add this field to indicate content type
  version          Int            @default(1)  // To track versions if multiple are generated
  jobApplicationId String
  isPrimary        Boolean        @default(true)  // Flag for the main/preferred resume for this application
  fileName         String?        // Name of exported PDF if saved
  filePath         String?        // Path to exported PDF if saved
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

// New model to store generated cover letters
model CoverLetter {
  id               String         @id @default(uuid())
  content          String         // The cover letter text content
  version          Int            @default(1)  // To track versions if multiple are generated
  jobApplicationId String
  isPrimary        Boolean        @default(true)  // Flag for the main/preferred cover letter for this application
  fileName         String?        // Name of exported PDF if saved
  filePath         String?        // Path to exported PDF if saved
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}
